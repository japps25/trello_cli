import logging
from requests_oauthlib import OAuth1
from enum import Enum
import json
import requests
import os

# set logging
logging.basicConfig(level=logging.INFO)


class RequestType(Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"


class TrelloAPI:

    def __init__(self, api_key, api_token) -> None:
        """
        Constructor

        :api_key: API key generated at https://trello.com/1/appKey/generate
        :api_secret: the secret component of api_key
        :token: OAuth token generated by the user in
                    trello.util.create_oauth_token
        :token_secret: the OAuth client secret for the given OAuth token
        """
        self.api_key = api_key or os.getenv("TRELLO_API_KEY")
        self.api_secret = os.getenv("TRELLO_API_SECRET")
        self.oauth_token = os.getenv("TRELLO_OAUTH_TOKEN")
        self.oauth_secret = os.getenv("TRELLO_OAUTH_SECRET")
        self.api_token = api_token or os.getenv("TRELLO_API_TOKEN")

        # client key and secret for oauth1 session
        if self.api_key or self.oauth_token:
            self.oauth = OAuth1(client_key=self.api_key, client_secret=self.api_secret,
                                resource_owner_key=self.oauth_token, resource_owner_secret=self.oauth_secret)

        else:
            json.dumps({"ERROR": "Authorization Error, please check API & oauth keys/tokens"})
            self.oauth = None

        self.headers = {
            "Accept": "application/json"
        }
        self.base_url = "https://api.trello.com/1/"

    def call_api(self, request_type: str, endpoint: str,
                 payload: dict | str = None) -> str:

        try:
            response = ""
            if request_type == "GET":
                response = requests.get(endpoint, timeout=30, headers=self.headers,
                                        params=payload, auth=self.oauth)
            elif request_type == "POST":
                response = requests.post(endpoint, self.headers, headers=self.headers, timeout=30,
                                         params=payload)

            if response.status_code in (200, 201):
                return response.json()
            elif response.status_code == 401:
                return json.dumps({"ERROR": "Authorization Error. "
                                            "Please check API Key"})
            response.raise_for_status()
        except requests.exceptions.HTTPError as errh:
            logging.error(errh)
        except requests.exceptions.ConnectionError as errc:
            logging.error(errc)
        except requests.exceptions.Timeout as errt:
            logging.error(errt)
        except requests.exceptions.RequestException as err:
            logging.error(err)

    def get_all_boards(self) -> str:
        """
        """
        boards_url = f"{self.base_url}members/me/boards/?filter=all"

        json_payload = self.call_api(request_type=RequestType.GET.value,
                                     endpoint=boards_url, payload={'fields': ['id', 'name']})

        return json_payload

    def get_board(self, board_id: str) -> str:
        board_url = f"{self.base_url}boards/{board_id}"
        if isinstance(board_id, str):
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=board_url, payload={'fields': ['id', 'name', 'labels']})
        else:
            raise ValueError("ERROR - Parameter 'query_dict' should be of Type dict"
                             "and 'board_id should be of Type str")
        return json_payload

    def get_all_lists(self, board_id: str) -> str:

        lists_url = f"{self.base_url}/boards/{board_id}/lists"
        if isinstance(board_id, str):
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=lists_url, payload={'fields': ['id', 'name']})
        else:
            raise ValueError("ERROR - Parameter board_id should be of type str")

        return json_payload

    def get_list(self, list_id: str) -> str:

        list_url = f"{self.base_url}/lists/{list_id}"

        if isinstance(list_id, str):
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=list_url)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")

        return json_payload

    def create_card(self, name: str, idList: str) -> str:

        create_card_url = f"{self.base_url}/cards/"

        if isinstance(name, str) and isinstance(idList, str):
            payload = {
                'name': name,
                'idList': idList,
                'key': self.api_key,
                'token': self.api_token
            }
            json_payload = self.call_api(request_type=RequestType.POST.value,
                                         endpoint=create_card_url,
                                         payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")

        return json_payload

    def get_all_cards(self, list_id: str) -> str:

        get_cards_url = f"{self.base_url}/lists/{list_id}/cards"

        if isinstance(list_id, str):
            payload = {'fields': ['id', 'name', 'labels', 'desc', 'badges']}
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=get_cards_url,
                                         payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")
        return json_payload

    def get_card(self, card_id: str) -> str:

        get_card_url = f"{self.base_url}/cards/{card_id}"

        if isinstance(card_id, str):
            payload = {'fields': ['id', 'name', 'labels', 'desc', 'badges']}
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=get_card_url, payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")
        return json_payload

    def get_actions(self, card_id: str) -> str:

        get_actions_url = f"{self.base_url}/cards/{card_id}/actions"
        if isinstance(card_id, str):
            payload = {
                'filter': 'commentCard',
            }
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=get_actions_url, payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")
        return json_payload

    def create_comment(self, card_id: str, text: str) -> str:

        create_comment_url = f"{self.base_url}/cards/{card_id}/actions/comments"

        if isinstance(card_id, str):
            payload = {
                'text': text,
                'key': self.api_key,
                'token': self.api_token,
            }
            json_payload = self.call_api(request_type=RequestType.POST.value,
                                         endpoint=create_comment_url,
                                         payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'list_id' should be of Type str")
        return json_payload

    def create_label(self, name: str, color: str, board_id: str) -> str:

        create_label_url = f"{self.base_url}/labels"

        if isinstance(board_id, str):
            payload = {
                'name': name,
                'color': color,
                'idBoard': board_id,
                'key': self.api_key,
                'token': self.api_token,
            }
            json_payload = self.call_api(request_type=RequestType.POST.value,
                                         endpoint=create_label_url,
                                         payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'board_id' should be of Type str")
        return json_payload

    def get_labels(self, board_id: str) -> str:

        get_labels_url = f"{self.base_url}/boards/{board_id}/labels"

        if isinstance(board_id, str):
            payload = {
                'fields': ['id', 'name', 'color', 'idBoard', 'uses'],
            }
            json_payload = self.call_api(request_type=RequestType.GET.value,
                                         endpoint=get_labels_url, payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'board_id' should be of Type str")
        return json_payload

    def add_card_labels(self, card_id: str, label_id: str) -> str:

        add_card_label_url = f"{self.base_url}/cards/{card_id}/idLabels"
        if isinstance(card_id, str):

            payload = {
                'value': label_id,
                'key': self.api_key,
                'token': self.api_token,
            }
            json_payload = self.call_api(request_type=RequestType.POST.value,
                                         endpoint=add_card_label_url,
                                         payload=payload)
        else:
            raise ValueError("ERROR - Parameter 'card_id' should be of Type str")
        return json_payload
